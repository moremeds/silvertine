#!/usr/bin/env bash

# Silvertine Trading System - Comprehensive Setup Script
# This script systematically sets up the entire development environment
# Author: Generated by Claude Code SuperClaude Framework
# Version: 1.0

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'  
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_NAME="silvertine"
PYTHON_VERSION="3.10"
REQUIRED_PYTHON_VERSION="3.10.0"

# Check if running as root (not recommended)
if [[ $EUID -eq 0 ]]; then
   log_error "This script should not be run as root"
   exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to compare version numbers
version_ge() {
    printf '%s\n%s\n' "$2" "$1" | sort -V -C
}

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command_exists apt-get; then
            echo "ubuntu"
        elif command_exists yum; then
            echo "rhel"
        elif command_exists pacman; then
            echo "arch"
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

# System Dependencies Installation
install_system_deps() {
    log_info "Installing system dependencies..."
    
    local os=$(detect_os)
    
    case $os in
        ubuntu)
            log_info "Detected Ubuntu/Debian system"
            sudo apt-get update
            sudo apt-get install -y \
                build-essential \
                gcc \
                make \
                autoconf \
                automake \
                libtool \
                pkg-config \
                wget \
                curl \
                git \
                python3 \
                python3-dev \
                python3-pip \
                python3-venv \
                redis-server \
                sqlite3 \
                libffi-dev \
                libssl-dev \
                zlib1g-dev \
                libbz2-dev \
                libreadline-dev \
                libsqlite3-dev \
                libncurses5-dev \
                libncursesw5-dev \
                xz-utils \
                tk-dev \
                libxml2-dev \
                libxmlsec1-dev
            ;;
        macos)
            log_info "Detected macOS system"
            if ! command_exists brew; then
                log_error "Homebrew is required but not installed. Please install: https://brew.sh/"
                exit 1
            fi
            brew update
            brew install \
                gcc \
                make \
                autoconf \
                automake \
                libtool \
                pkg-config \
                wget \
                curl \
                git \
                python@3.10 \
                redis \
                sqlite \
                openssl \
                readline \
                zlib \
                bzip2
            ;;
        *)
            log_warning "Unknown OS detected. Please install build tools manually."
            ;;
    esac
    
    log_success "System dependencies installed"
}

# Check Python version
check_python() {
    log_info "Checking Python installation..."
    
    if ! command_exists python3; then
        log_error "Python 3 is not installed"
        return 1
    fi
    
    local python_version=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
    log_info "Found Python $python_version"
    
    if ! version_ge "$python_version" "$PYTHON_VERSION"; then
        log_error "Python $PYTHON_VERSION or higher is required, found $python_version"
        return 1
    fi
    
    log_success "Python version check passed"
}

# Install Poetry
install_poetry() {
    log_info "Setting up Poetry package manager..."
    
    if command_exists poetry; then
        local poetry_version=$(poetry --version | cut -d' ' -f3)
        log_info "Poetry $poetry_version already installed"
    else
        log_info "Installing Poetry..."
        curl -sSL https://install.python-poetry.org | python3 -
        
        # Add Poetry to PATH
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            export PATH="$HOME/.local/bin:$PATH"
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            export PATH="$HOME/.local/bin:$PATH"
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc
        fi
        
        log_success "Poetry installed"
    fi
    
    # Configure Poetry
    poetry config virtualenvs.in-project false
    poetry config virtualenvs.create true
    
    log_success "Poetry configured"
}

# Install TA-Lib C Library
install_talib_c() {
    log_info "Installing TA-Lib C library..."
    
    # Check if TA-Lib is already installed
    if ldconfig -p | grep -q "libta_lib"; then
        log_info "TA-Lib C library already installed"
        return 0
    fi
    
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    log_info "Downloading TA-Lib source code..."
    wget -q https://pip.vnpy.com/colletion/ta-lib-0.6.4-src.tar.gz
    tar -xzf ta-lib-0.6.4-src.tar.gz
    cd ta-lib-0.6.4
    
    log_info "Configuring TA-Lib build..."
    ./configure --prefix=/usr/local
    
    log_info "Compiling TA-Lib (this may take several minutes)..."
    make -j$(nproc)
    
    log_info "Installing TA-Lib..."
    sudo make install
    
    # Update library cache
    sudo ldconfig
    
    cd "$SCRIPT_DIR"
    rm -rf "$temp_dir"
    
    log_success "TA-Lib C library installed"
}

# Install Python dependencies
install_python_deps() {
    log_info "Installing Python dependencies via Poetry..."
    
    cd "$SCRIPT_DIR"
    
    # Install main dependencies
    poetry install
    
    # Install optional broker dependencies
    poetry install --extras "brokers"
    
    log_success "Python dependencies installed"
}

# Setup Redis
setup_redis() {
    log_info "Setting up Redis server..."
    
    local os=$(detect_os)
    
    case $os in
        ubuntu)
            sudo systemctl enable redis-server
            sudo systemctl start redis-server
            ;;
        macos)
            brew services start redis
            ;;
    esac
    
    # Test Redis connection
    if redis-cli ping > /dev/null 2>&1; then
        log_success "Redis server is running"
    else
        log_warning "Redis server may not be running properly"
    fi
}

# Create configuration files
setup_config() {
    log_info "Setting up configuration files..."
    
    cd "$SCRIPT_DIR"
    
    # Create development environment config if it doesn't exist
    if [[ ! -f "config/environments/development.yaml" ]]; then
        if [[ -f "config/environments/development.yaml.example" ]]; then
            cp "config/environments/development.yaml.example" "config/environments/development.yaml"
            log_info "Created development.yaml from example"
        fi
    fi
    
    # Create exchange configs if they don't exist
    for exchange in binance_testnet interactive_brokers; do
        config_file="config/exchanges/${exchange}.yaml"
        example_file="${config_file}.example"
        
        if [[ ! -f "$config_file" && -f "$example_file" ]]; then
            cp "$example_file" "$config_file"
            log_info "Created ${exchange}.yaml from example"
        fi
    done
    
    # Create risk management config
    risk_config="config/risk/risk_management.yaml"
    risk_example="${risk_config}.example"
    
    if [[ ! -f "$risk_config" && -f "$risk_example" ]]; then
        cp "$risk_example" "$risk_config"
        log_info "Created risk_management.yaml from example"
    fi
    
    log_success "Configuration files ready"
}

# Setup IDE configuration
setup_ide() {
    log_info "Setting up IDE configuration..."
    
    cd "$SCRIPT_DIR"
    
    # Get Poetry virtual environment path
    local venv_path=$(poetry env info --path)
    local python_path="$venv_path/bin/python"
    
    # Create .vscode directory if it doesn't exist
    mkdir -p .vscode
    
    # Update VSCode settings with correct paths
    cat > .vscode/settings.json << EOF
{
    "python.defaultInterpreterPath": "$python_path",
    "python.terminal.activateEnvironment": true,
    "python.analysis.extraPaths": [
        "$venv_path/lib/python3.10/site-packages"
    ],
    "python.linting.enabled": true,
    "python.linting.ruffEnabled": true,
    "python.linting.mypyEnabled": true,
    "python.formatting.provider": "black",
    "python.analysis.autoImportCompletions": true,
    "python.analysis.typeCheckingMode": "basic",
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        ".pytest_cache": true,
        ".mypy_cache": true,
        ".ruff_cache": true,
        "htmlcov": true,
        "silver_cache": true
    },
    "python.testing.pytestEnabled": true,
    "python.testing.pytestArgs": [
        "tests"
    ],
    "python.testing.unittestEnabled": false
}
EOF
    
    # Update pyrightconfig.json with correct venv path
    local venv_name=$(basename "$venv_path")
    local venv_dir=$(dirname "$venv_path")
    
    cat > pyrightconfig.json << EOF
{
    "include": [
        "silvertine",
        "tests"
    ],
    "exclude": [
        "**/__pycache__",
        "**/*.pyc",
        ".pytest_cache",
        ".mypy_cache", 
        ".ruff_cache",
        "htmlcov",
        "silver_cache",
        "scrapyard"
    ],
    "venvPath": "$venv_dir",
    "venv": "$venv_name",
    "pythonVersion": "3.10",
    "typeCheckingMode": "basic",
    "useLibraryCodeForTypes": true,
    "autoImportCompletions": true,
    "reportMissingImports": "warning",
    "reportMissingTypeStubs": "none",
    "reportUnknownParameterType": "none",
    "reportUnknownArgumentType": "none",
    "reportUnknownLambdaType": "none",
    "reportUnknownVariableType": "none",
    "reportUnknownMemberType": "none"
}
EOF
    
    log_success "IDE configuration updated"
}

# Create runtime directories
setup_runtime_dirs() {
    log_info "Creating runtime directories..."
    
    cd "$SCRIPT_DIR"
    
    # Create silver_cache directory structure
    mkdir -p silver_cache/{sqlite,logs,temp,redis,progress}
    
    # Create logs subdirectories
    mkdir -p silver_cache/logs/{integration_tests,app,system}
    
    # Set proper permissions
    chmod 755 silver_cache
    chmod 755 silver_cache/*
    
    log_success "Runtime directories created"
}

# Validation tests
validate_installation() {
    log_info "Validating installation..."
    
    cd "$SCRIPT_DIR"
    
    # Test Poetry environment
    if ! poetry run python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')"; then
        log_error "Poetry environment validation failed"
        return 1
    fi
    
    # Test key imports
    log_info "Testing critical imports..."
    
    local imports=(
        "loguru"
        "fastapi" 
        "redis"
        "sqlalchemy"
        "textual"
        "websockets"
        "pydantic"
        "aiohttp"
        "numpy"
        "pandas"
    )
    
    for import in "${imports[@]}"; do
        if ! poetry run python -c "import $import; print('✓ $import')"; then
            log_error "Failed to import $import"
            return 1
        fi
    done
    
    # Test TA-Lib (may still be compiling)
    log_info "Testing TA-Lib import..."
    if poetry run python -c "import talib; print('✓ TA-Lib functions:', len(talib.get_functions()))" 2>/dev/null; then
        log_success "TA-Lib is working correctly"
    else
        log_warning "TA-Lib import failed - may still be compiling. Run 'poetry run python -c \"import talib\"' later to verify."
    fi
    
    # Test project imports
    log_info "Testing project imports..."
    if poetry run python -c "import silvertine; print('✓ silvertine package')"; then
        log_success "Project imports working"
    else
        log_error "Project import validation failed"
        return 1
    fi
    
    # Test Redis connection
    if redis-cli ping > /dev/null 2>&1; then
        log_success "Redis connection working"
    else
        log_warning "Redis connection test failed"
    fi
    
    # Run basic tests if available
    if [[ -d "tests" ]]; then
        log_info "Running basic test suite..."
        if poetry run python -m pytest tests/unit/ -v --tb=short -x; then
            log_success "Basic tests passed"
        else
            log_warning "Some tests failed - check test output"
        fi
    fi
    
    log_success "Installation validation completed"
}

# Display next steps
show_next_steps() {
    log_success "🎉 Silvertine setup completed successfully!"
    echo
    echo -e "${BLUE}Next Steps:${NC}"
    echo "1. Restart your IDE/editor to pick up the new Python interpreter"
    echo "2. If using VSCode, select the Poetry virtual environment:"
    echo "   - Press Ctrl+Shift+P"
    echo "   - Type 'Python: Select Interpreter'"
    echo "   - Choose the Poetry environment path shown below"
    echo
    echo -e "${YELLOW}Poetry Virtual Environment:${NC} $(poetry env info --path)"
    echo
    echo -e "${BLUE}Development Commands:${NC}"
    echo "• Activate environment: ${GREEN}poetry shell${NC}"
    echo "• Run tests: ${GREEN}poetry run pytest${NC}"
    echo "• Start development server: ${GREEN}poetry run python -m silvertine${NC}"
    echo "• Code formatting: ${GREEN}poetry run black .${NC}"
    echo "• Linting: ${GREEN}poetry run ruff check . --fix${NC}"
    echo "• Type checking: ${GREEN}poetry run mypy silvertine${NC}"
    echo
    echo -e "${BLUE}Configuration:${NC}"
    echo "• Development config: ${GREEN}config/environments/development.yaml${NC}"
    echo "• Exchange settings: ${GREEN}config/exchanges/${NC}"
    echo "• Risk management: ${GREEN}config/risk/risk_management.yaml${NC}"
    echo
    echo -e "${BLUE}Documentation:${NC}"
    echo "• Project README: ${GREEN}README.md${NC}"
    echo "• Architecture docs: ${GREEN}docs/${NC}"
    echo
    if ! poetry run python -c "import talib" 2>/dev/null; then
        echo -e "${YELLOW}Note:${NC} TA-Lib may still be compiling in the background."
        echo "Test with: ${GREEN}poetry run python -c \"import talib; print('TA-Lib ready!')\"${NC}"
    fi
}

# Main setup function
main() {
    log_info "🚀 Starting Silvertine Trading System Setup"
    log_info "This will install all dependencies and configure the development environment"
    echo
    
    # Parse command line arguments
    local skip_system=false
    local skip_validation=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-system)
                skip_system=true
                shift
                ;;
            --skip-validation)
                skip_validation=true
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [options]"
                echo "Options:"
                echo "  --skip-system      Skip system dependency installation"
                echo "  --skip-validation  Skip validation tests"
                echo "  --help, -h         Show this help message"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Setup steps
    if [[ "$skip_system" != true ]]; then
        install_system_deps
    fi
    
    check_python
    install_poetry
    install_talib_c
    install_python_deps
    setup_redis
    setup_config
    setup_ide
    setup_runtime_dirs
    
    if [[ "$skip_validation" != true ]]; then
        validate_installation
    fi
    
    show_next_steps
    
    log_success "Setup completed! 🎯"
}

# Run main function
main "$@"