[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "silvertine"
version = "0.1.0"
description = "A lightweight, event-driven quantitative trading and backtesting system"
readme = "README.md"
authors = [
    {name = "Silvertine Team"},
]
license = {file = "LICENSE"}
requires-python = ">=3.10,<3.14"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "asyncio-mqtt>=0.16.0",
    "fastapi>=0.104.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "textual>=0.41.0",
    "websockets>=12.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "aiohttp>=3.9.0",
    "python-multipart>=0.0.6",
    "uvicorn[standard]>=0.24.0",
    "pyyaml>=6.0.1",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-client>=0.19.0",
    "psutil (>=7.0.0,<8.0.0)",
    "aioredis (>=2.0.1,<3.0.0)",
    "aiosqlite (>=0.21.0,<0.22.0)",
    "tzlocal>=5.3.1",
    "PySide6==6.8.2.1",
    "pyqtgraph>=0.13.7",
    "qdarkstyle>=3.2.3",
    "numpy>=2.2.3",
    "pandas (>=2.3.1,<3.0.0)",
    "ta-lib>=0.6.4",
    "deap>=1.4.2",
    "pyzmq>=26.3.0",
    "plotly>=6.0.0",
    "tqdm>=4.67.1",
    "loguru>=0.7.3",
    "nbformat>=5.10.4",
    "pyarrow (>=21.0.0,<22.0.0)",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.9.0",
    "mypy>=1.6.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
    "httpx>=0.25.0",
    "pytest-xdist>=3.3.0",
    "coverage[toml]>=7.3.0",
]
brokers = [
    "python-binance>=1.0.19",
]
monitoring = [
    "grafana-api>=1.0.3",
    "prometheus-api-client>=0.5.3",
]

[project.urls]
Homepage = "https://github.com/yourusername/silvertine"
Documentation = "https://github.com/yourusername/silvertine/docs"
Repository = "https://github.com/yourusername/silvertine"
Issues = "https://github.com/yourusername/silvertine/issues"

[project.scripts]
silvertine = "silvertine.main:main"

[tool.setuptools.packages.find]
where = ["silvertine"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | cache
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM118", # in-dict-keys
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "cache",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-single-line = true

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
ignore_missing_imports = true 
exclude = [
    "silver_cache/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "ib_insync.*",
    "binance.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=silvertine",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=75",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "broker: marks tests that require broker connections",
    "redis: marks tests that require Redis",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["silvertine"]
omit = [
    "silvertine/main.py",
    "*/tests/*",
    "*/silver_cache/*",
    "*/__pycache__/*",
]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

